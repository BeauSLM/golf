Run started on Sat Mar 18 09:40:53 2023

Hostname: beau-Desktop

-------------------------------------------------------------------------------
Running make |
--------------

% /usr/bin/make ms3

STDOUT:
clang++ -o main.o -c main.cpp -Wall -Wextra -std=c++17 -DMILESTONE=3 -g -MMD -MF main.d
clang++ -o error.o -c error.cpp -Wall -Wextra -std=c++17 -DMILESTONE=3 -g -MMD -MF error.d
clang++ -o lex.o -c lex.cpp -Wall -Wextra -std=c++17 -DMILESTONE=3 -g -MMD -MF lex.d
clang++ -o parse.o -c parse.cpp -Wall -Wextra -std=c++17 -DMILESTONE=3 -g -MMD -MF parse.d
clang++ -o ast.o -c ast.cpp -Wall -Wextra -std=c++17 -DMILESTONE=3 -g -MMD -MF ast.d
clang++ -o symboltable.o -c symboltable.cpp -Wall -Wextra -std=c++17 -DMILESTONE=3 -g -MMD -MF symboltable.d
clang++ -o semantics.o -c semantics.cpp -Wall -Wextra -std=c++17 -DMILESTONE=3 -g -MMD -MF semantics.d
clang++ -Wall -Wextra -std=c++17 -DMILESTONE=3 -g -o golf main.o error.o lex.o parse.o ast.o symboltable.o semantics.o


STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Locating GoLF compiler |
------------------------

Compiler will be run as ./golf

-------------------------------------------------------------------------------
Test: too few arguments |
-------------------------

% ./golf

STDOUT:


STDERR:
Usage: ./golf <filename>



RETURN CODE: 1

-------------------------------------------------------------------------------
Test: too many arguments |
--------------------------

% ./golf /dev/null /dev/zero

STDOUT:


STDERR:
Usage: ./golf <filename>



RETURN CODE: 1

-------------------------------------------------------------------------------
Test: nonexistent file |
------------------------

% ./golf /i/do/not/exist

STDOUT:


STDERR:
Could not open file '/i/do/not/exist': No such file or directory


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: later global "int" redeclaration |
----------------------------------------

% ./golf ./ms3/check.t1

STDOUT:


STDERR:
error: expected type, got 'int' at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: global var declaration loop |
-----------------------------------

% ./golf ./ms3/check.t2

STDOUT:


STDERR:
error: expected type, got 'int' at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: local var version of check.t2 |
-------------------------------------

% ./golf ./ms3/check.t3

STDOUT:
program sym=0x560efebea190
    func sym=0x560efebea190 @ line 4
        newid [main] @ line 4
        sig
            formals
            typeid [$void] sym=0x560efebe93f0
        block
            var sym=0x560efebea2d0 @ line 5
                newid [int] @ line 5
                typeid [int] sym=0x560efebe9960 @ line 5
            exprstmt @ line 6
                funccall sig=void @ line 6
                    id [printi] sig=f(int) sym=0x560efebe9d50 @ line 6
                    actuals
                        id [int] sig=int sym=0x560efebea2d0 @ line 6



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: global name test |
------------------------

% ./golf ./ms3/check.t4

STDOUT:
program sym=0x558bbd3cf690
    globvar sym=0x558bbd3cf5b0 @ line 3
        newid [b4int] @ line 3
        typeid [int] sym=0x558bbd3ced80 @ line 3
    func sym=0x558bbd3cf600 @ line 5
        newid [b4func] @ line 5
        sig
            formals
            typeid [$void] sym=0x558bbd3ce5f0
        block
            exprstmt @ line 6
                funccall sig=void @ line 6
                    id [printi] sig=f(int) sym=0x558bbd3cf170 @ line 6
                    actuals
                        id [b4int] sig=int sym=0x558bbd3cf5b0 @ line 6
            exprstmt @ line 7
                funccall sig=void @ line 7
                    id [printi] sig=f(int) sym=0x558bbd3cf170 @ line 7
                    actuals
                        id [aft3rint] sig=int sym=0x558bbd3cf7b0 @ line 7
            exprstmt @ line 8
                funccall sig=void @ line 8
                    id [aft3rfunc] sig=f() sym=0x558bbd3cf720 @ line 8
                    actuals
    func sym=0x558bbd3cf690 @ line 11
        newid [main] @ line 11
        sig
            formals
            typeid [$void] sym=0x558bbd3ce5f0
        block
            exprstmt @ line 12
                funccall sig=void @ line 12
                    id [b4func] sig=f() sym=0x558bbd3cf600 @ line 12
                    actuals
    func sym=0x558bbd3cf720 @ line 15
        newid [aft3rfunc] @ line 15
        sig
            formals
            typeid [$void] sym=0x558bbd3ce5f0
        block
            exprstmt @ line 16
                funccall sig=void @ line 16
                    id [printi] sig=f(int) sym=0x558bbd3cf170 @ line 16
                    actuals
                        id [b4int] sig=int sym=0x558bbd3cf5b0 @ line 16
            exprstmt @ line 17
                funccall sig=void @ line 17
                    id [printi] sig=f(int) sym=0x558bbd3cf170 @ line 17
                    actuals
                        id [aft3rint] sig=int sym=0x558bbd3cf7b0 @ line 17
    globvar sym=0x558bbd3cf7b0 @ line 20
        newid [aft3rint] @ line 20
        typeid [int] sym=0x558bbd3ced80 @ line 20



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: block scope check |
-------------------------

% ./golf ./ms3/check.t5

STDOUT:
program sym=0x55775b0e2670
    func sym=0x55775b0e2670 @ line 3
        newid [main] @ line 3
        sig
            formals
            typeid [$void] sym=0x55775b0df600
        block
            var sym=0x55775b0e27b0 @ line 4
                newid [x] @ line 4
                typeid [int] sym=0x55775b0e20d0 @ line 4
            block
                var sym=0x55775b0e2840 @ line 6
                    newid [x] @ line 6
                    typeid [bool] sym=0x55775b0df650 @ line 6
                block
                    var sym=0x55775b0e2aa0 @ line 8
                        newid [x] @ line 8
                        typeid [string] sym=0x55775b0e2160 @ line 8
                    = sig=void @ line 9
                        id [x] sig=string sym=0x55775b0e2aa0 @ line 9
                        string [asdf] sig=string @ line 9
                    block
                        var sym=0x55775b0e2b30 @ line 11
                            newid [x] @ line 11
                            typeid [int] sym=0x55775b0e20d0 @ line 11
                        = sig=void @ line 12
                            id [x] sig=int sym=0x55775b0e2b30 @ line 12
                            + sig=int @ line 12
                                id [x] sig=int sym=0x55775b0e2b30 @ line 12
                                int [1] sig=int @ line 12
                    exprstmt @ line 14
                        funccall sig=void @ line 14
                            id [prints] sig=f(string) sym=0x55775b0e2cc0 @ line 14
                            actuals
                                id [x] sig=string sym=0x55775b0e2aa0 @ line 14
                exprstmt @ line 16
                    funccall sig=void @ line 16
                        id [printb] sig=f(bool) sym=0x55775b0e15d0 @ line 16
                        actuals
                            id [x] sig=bool sym=0x55775b0e2840 @ line 16
            exprstmt @ line 18
                funccall sig=void @ line 18
                    id [printi] sig=f(int) sym=0x55775b0e23f0 @ line 18
                    actuals
                        id [x] sig=int sym=0x55775b0e27b0 @ line 18



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: global var declaration, complex loop |
--------------------------------------------

% ./golf ./ms3/check.t6

STDOUT:


STDERR:
error: expected type, got 'bool' at or near line 3


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: parameter scope test |
----------------------------

% ./golf ./ms3/check.t7

STDOUT:
program sym=0x5606f6293f60
    func sym=0x5606f6293df0 @ line 3
        newid [foo] @ line 3
        sig
            formals
                formal
                    newid [int] sym=0x5606f6294100 @ line 3
                    typeid [int] sym=0x5606f6294100 @ line 3
            typeid [int] sym=0x5606f62935c0 @ line 3
        block
            exprstmt @ line 4
                funccall sig=void @ line 4
                    id [printi] sig=f(int) sym=0x5606f62939b0 @ line 4
                    actuals
                        id [int] sig=int sym=0x5606f6294100 @ line 4
            return @ line 5
                id [int] sig=int sym=0x5606f6294100 @ line 5
    func sym=0x5606f6293e40 @ line 8
        newid [bar] @ line 8
        sig
            formals
                formal
                    newid [bar] sym=0x5606f6294190 @ line 8
                    typeid [int] sym=0x5606f62935c0 @ line 8
            typeid [$void] sym=0x5606f62934a0
        block
            emptystmt
    func sym=0x5606f6293ed0 @ line 11
        newid [string] @ line 11
        sig
            formals
                formal
                    newid [string] sym=0x5606f62941e0 @ line 11
                    typeid [int] sym=0x5606f62935c0 @ line 11
            typeid [bool] sym=0x5606f6293530 @ line 11
        block
            return @ line 12
                id [true] sig=bool sym=0x5606f6293770 @ line 12
    func sym=0x5606f6293f60 @ line 15
        newid [main] @ line 15
        sig
            formals
            typeid [$void] sym=0x5606f62934a0
        block
            emptystmt



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: constants can't be changed |
----------------------------------

% ./golf ./ms3/check.t8

STDOUT:


STDERR:
error: can't assign to a constant at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: nonexistent type name |
-----------------------------

% ./golf ./ms3/check.t9

STDOUT:


STDERR:
error: unknown name 'notthere' at or near line 3


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: type name not a type |
----------------------------

% ./golf ./ms3/check.t10

STDOUT:


STDERR:
error: expected type, got 't' at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: formal parameters need types |
------------------------------------

% ./golf ./ms3/check.t11

STDOUT:


STDERR:
error: expected type, got 'main' at or near line 6


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: multiple (main) functions, same name |
--------------------------------------------

% ./golf ./ms3/check.t12

STDOUT:


STDERR:
error: 'main' redefined at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: no main function |
------------------------

% ./golf ./ms3/check.t13

STDOUT:


STDERR:
error: missing main() function


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: main can't have arguments |
---------------------------------

% ./golf ./ms3/check.t14

STDOUT:


STDERR:
error: main() can't have arguments at or near line 3


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: main can't have a return value |
--------------------------------------

% ./golf ./ms3/check.t15

STDOUT:


STDERR:
error: main() can't have a return value at or near line 3


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: dup check for formal parameters |
---------------------------------------

% ./golf ./ms3/check.t16

STDOUT:


STDERR:
error: 'i' redefined at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: function call as lvalue |
-------------------------------

% ./golf ./ms3/check.t17

STDOUT:


STDERR:
error: can only assign to a variable at or near line 6


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: function name as lvalue |
-------------------------------

% ./golf ./ms3/check.t18

STDOUT:


STDERR:
error: operand type mismatch for '=' at or near line 6


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: humongous integer literal |
---------------------------------

% ./golf ./ms3/check.t19

STDOUT:


STDERR:
error: integer literal out of range at or near line 5


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: positive integer literal out of range |
---------------------------------------------

% ./golf ./ms3/check.t20

STDOUT:


STDERR:
error: integer literal too large at or near line 6


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: negative integer literal out of range |
---------------------------------------------

% ./golf ./ms3/check.t21

STDOUT:


STDERR:
error: integer literal too small at or near line 6


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "break" not inside "for" loop |
-------------------------------------

% ./golf ./ms3/check.t22

STDOUT:


STDERR:
error: break must be inside 'for' at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "break" in block, but not in "for" |
------------------------------------------

% ./golf ./ms3/check.t23

STDOUT:


STDERR:
error: break must be inside 'for' at or near line 5


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "break" in "if" block |
-----------------------------

% ./golf ./ms3/check.t24

STDOUT:


STDERR:
error: break must be inside 'for' at or near line 5


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: missing return statement |
--------------------------------

% ./golf ./ms3/check.t25

STDOUT:


STDERR:
error: no return statement in function at or near line 6


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: returning value from void function |
------------------------------------------

% ./golf ./ms3/check.t26

STDOUT:


STDERR:
error: this function can't return a value at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: return type mismatch |
----------------------------

% ./golf ./ms3/check.t27

STDOUT:


STDERR:
error: returned value has the wrong type at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: missing return type |
---------------------------

% ./golf ./ms3/check.t28

STDOUT:


STDERR:
error: this function must return a value at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if" expr not a boolean type |
------------------------------------

% ./golf ./ms3/check.t29

STDOUT:


STDERR:
error: if expression must be boolean type at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "if"-"else" not a boolean type |
--------------------------------------

% ./golf ./ms3/check.t30

STDOUT:


STDERR:
error: ifelse expression must be boolean type at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: "for" expr not a boolean type |
-------------------------------------

% ./golf ./ms3/check.t31

STDOUT:


STDERR:
error: for expression must be boolean type at or near line 10


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: legit expression statements |
-----------------------------------

% ./golf ./ms3/check.t32

STDOUT:
program sym=0x5576a4de8290
    func sym=0x5576a4de8290 @ line 3
        newid [main] @ line 3
        sig
            formals
            typeid [$void] sym=0x5576a4de7940
        block
            var sym=0x5576a4de83d0 @ line 4
                newid [i] @ line 4
                typeid [int] sym=0x5576a4de7a60 @ line 4
            exprstmt @ line 5
                id [i] sig=int sym=0x5576a4de83d0 @ line 5
            exprstmt @ line 6
                int [42] sig=int @ line 6



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: built-in routine check |
------------------------------

% ./golf ./ms3/check.t33

STDOUT:
program sym=0x55a40c0ce390
    func sym=0x55a40c0ce390 @ line 3
        newid [main] @ line 3
        sig
            formals
            typeid [$void] sym=0x55a40c0cc200
        block
            exprstmt @ line 4
                funccall sig=void @ line 4
                    id [prints] sig=f(string) sym=0x55a40c0cb800 @ line 4
                    actuals
                        string [Hello, world!\n] sig=string @ line 4
            exprstmt @ line 5
                funccall sig=void @ line 5
                    id [printb] sig=f(bool) sym=0x55a40c0ce040 @ line 5
                    actuals
                        id [true] sig=bool sym=0x55a40c0cde40 @ line 5
            exprstmt @ line 6
                funccall sig=void @ line 6
                    id [printi] sig=f(int) sym=0x55a40c0ce4f0 @ line 6
                    actuals
                        int [123] sig=int @ line 6
            exprstmt @ line 7
                funccall sig=void @ line 7
                    id [printc] sig=f(int) sym=0x55a40c0ce460 @ line 7
                    actuals
                        int [123] sig=int @ line 7
            var sym=0x55a40c0cec90 @ line 8
                newid [ch] @ line 8
                typeid [int] sym=0x55a40c0cdac0 @ line 8
            = sig=void @ line 9
                id [ch] sig=int sym=0x55a40c0cec90 @ line 9
                funccall sig=int @ line 9
                    id [getchar] sig=f() sym=0x55a40c0cb890 @ line 9
                    actuals
            exprstmt @ line 10
                funccall sig=void @ line 10
                    id [halt] sig=f() sym=0x55a40c0cb920 @ line 10
                    actuals



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: actual parameter type check |
-----------------------------------

% ./golf ./ms3/check.t34

STDOUT:


STDERR:
error: number/type of arguments doesn't match function declaration at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: operand type mismatch |
-----------------------------

% ./golf ./ms3/check.t35

STDOUT:


STDERR:
error: operand type mismatch for '+' at or near line 10


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: another actual parameter type check |
-------------------------------------------

% ./golf ./ms3/check.t36

STDOUT:


STDERR:
error: number/type of arguments doesn't match function declaration at or near line 7


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: return+argument checks |
------------------------------

% ./golf ./ms3/check.t37

STDOUT:


STDERR:
error: number/type of arguments doesn't match function declaration at or near line 8


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: scope check and undefined variable |
------------------------------------------

% ./golf ./ms3/check.t38

STDOUT:


STDERR:
error: unknown name 'c' at or near line 10


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: redefined variable |
--------------------------

% ./golf ./ms3/check.t39

STDOUT:


STDERR:
error: 'b' redefined at or near line 13


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: comparable and ordered comparisons |
------------------------------------------

% ./golf ./ms3/check.t40

STDOUT:


STDERR:
error: operand type mismatch for '>' at or near line 8


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: int/bool distinction |
----------------------------

% ./golf ./ms3/check.t41

STDOUT:


STDERR:
error: operand type mismatch for '=' at or near line 5


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: deep type propagation |
-----------------------------

% ./golf ./ms3/check.t42

STDOUT:
program sym=0x5630c4f97d80
    func sym=0x5630c4f97d80 @ line 3
        newid [main] @ line 3
        sig
            formals
            typeid [$void] sym=0x5630c4f95fd0
        block
            var sym=0x5630c4f97ec0 @ line 4
                newid [x] @ line 4
                typeid [int] sym=0x5630c4f96ea0 @ line 4
            exprstmt @ line 5
                >= sig=bool @ line 5
                    - sig=int @ line 5
                        + sig=int @ line 5
                            int [2] sig=int @ line 5
                            * sig=int @ line 5
                                int [3] sig=int @ line 5
                                int [5] sig=int @ line 5
                        int [123] sig=int @ line 5
                    u- sig=int @ line 5
                        u- sig=int @ line 5
                            u- sig=int @ line 5
                                id [x] sig=int sym=0x5630c4f97ec0 @ line 5
            var sym=0x5630c4f98460 @ line 7
                newid [b] @ line 7
                typeid [bool] sym=0x5630c4f96020 @ line 7
            exprstmt @ line 8
                != sig=bool @ line 8
                    ! sig=bool @ line 8
                        ! sig=bool @ line 8
                            ! sig=bool @ line 8
                                || sig=bool @ line 8
                                    && sig=bool @ line 8
                                        id [true] sig=bool sym=0x5630c4f958a0 @ line 8
                                        id [false] sig=bool sym=0x5630c4f95930 @ line 8
                                    == sig=bool @ line 8
                                        id [b] sig=bool sym=0x5630c4f98460 @ line 8
                                        id [true] sig=bool sym=0x5630c4f958a0 @ line 8
                    <= sig=bool @ line 8
                        int [5] sig=int @ line 8
                        int [6] sig=int @ line 8



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: redefining "true" and "false" |
-------------------------------------

% ./golf ./ms3/check.t43

STDOUT:
program sym=0x55b52c86d500
    globvar sym=0x55b52c86d4b0 @ line 3
        newid [true] @ line 3
        typeid [int] sym=0x55b52c86c910 @ line 3
    func sym=0x55b52c86d500 @ line 5
        newid [main] @ line 5
        sig
            formals
            typeid [$void] sym=0x55b52c86c700
        block
            var sym=0x55b52c86d680 @ line 6
                newid [false] @ line 6
                typeid [int] sym=0x55b52c86c910 @ line 6
            exprstmt @ line 7
                funccall sig=void @ line 7
                    id [printi] sig=f(int) sym=0x55b52c86d070 @ line 7
                    actuals
                        * sig=int @ line 7
                            id [true] sig=int sym=0x55b52c86d4b0 @ line 7
                            id [false] sig=int sym=0x55b52c86d680 @ line 7



STDERR:


RETURN CODE: 0

-------------------------------------------------------------------------------
Test: call of non-function |
----------------------------

% ./golf ./ms3/check.t44

STDOUT:


STDERR:
error: can't call something that isn't a function at or near line 4


RETURN CODE: 1

-------------------------------------------------------------------------------
Test: type id used in wrong context |
-------------------------------------

% ./golf ./ms3/check.t45

STDOUT:


STDERR:
error: can't use type 'int' here at or near line 5


RETURN CODE: 1

Run ended on Sat Mar 18 09:40:55 2023

